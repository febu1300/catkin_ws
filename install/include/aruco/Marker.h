// Generated by gencpp from file aruco/Marker.msg
// DO NOT EDIT!


#ifndef ARUCO_MESSAGE_MARKER_H
#define ARUCO_MESSAGE_MARKER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace aruco
{
template <class ContainerAllocator>
struct Marker_
{
  typedef Marker_<ContainerAllocator> Type;

  Marker_()
    : posx(0.0)
    , posy(0.0)
    , posz(0.0)
    , rotx(0.0)
    , roty(0.0)
    , rotz(0.0)
    , size(0.0)
    , id(0)  {
    }
  Marker_(const ContainerAllocator& _alloc)
    : posx(0.0)
    , posy(0.0)
    , posz(0.0)
    , rotx(0.0)
    , roty(0.0)
    , rotz(0.0)
    , size(0.0)
    , id(0)  {
  (void)_alloc;
    }



   typedef double _posx_type;
  _posx_type posx;

   typedef double _posy_type;
  _posy_type posy;

   typedef double _posz_type;
  _posz_type posz;

   typedef double _rotx_type;
  _rotx_type rotx;

   typedef double _roty_type;
  _roty_type roty;

   typedef double _rotz_type;
  _rotz_type rotz;

   typedef double _size_type;
  _size_type size;

   typedef int32_t _id_type;
  _id_type id;





  typedef boost::shared_ptr< ::aruco::Marker_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aruco::Marker_<ContainerAllocator> const> ConstPtr;

}; // struct Marker_

typedef ::aruco::Marker_<std::allocator<void> > Marker;

typedef boost::shared_ptr< ::aruco::Marker > MarkerPtr;
typedef boost::shared_ptr< ::aruco::Marker const> MarkerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::aruco::Marker_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::aruco::Marker_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace aruco

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'aruco': ['/home/buruk/catkin_ws/src/aruco/aruco/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::aruco::Marker_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::aruco::Marker_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aruco::Marker_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aruco::Marker_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aruco::Marker_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aruco::Marker_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::aruco::Marker_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bf2cecebc9afd48ac2cbae7c86d68949";
  }

  static const char* value(const ::aruco::Marker_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbf2cecebc9afd48aULL;
  static const uint64_t static_value2 = 0xc2cbae7c86d68949ULL;
};

template<class ContainerAllocator>
struct DataType< ::aruco::Marker_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aruco/Marker";
  }

  static const char* value(const ::aruco::Marker_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::aruco::Marker_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 posx\n\
float64 posy\n\
float64 posz\n\
float64 rotx\n\
float64 roty\n\
float64 rotz\n\
float64 size\n\
int32 id\n\
";
  }

  static const char* value(const ::aruco::Marker_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::aruco::Marker_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.posx);
      stream.next(m.posy);
      stream.next(m.posz);
      stream.next(m.rotx);
      stream.next(m.roty);
      stream.next(m.rotz);
      stream.next(m.size);
      stream.next(m.id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Marker_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aruco::Marker_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::aruco::Marker_<ContainerAllocator>& v)
  {
    s << indent << "posx: ";
    Printer<double>::stream(s, indent + "  ", v.posx);
    s << indent << "posy: ";
    Printer<double>::stream(s, indent + "  ", v.posy);
    s << indent << "posz: ";
    Printer<double>::stream(s, indent + "  ", v.posz);
    s << indent << "rotx: ";
    Printer<double>::stream(s, indent + "  ", v.rotx);
    s << indent << "roty: ";
    Printer<double>::stream(s, indent + "  ", v.roty);
    s << indent << "rotz: ";
    Printer<double>::stream(s, indent + "  ", v.rotz);
    s << indent << "size: ";
    Printer<double>::stream(s, indent + "  ", v.size);
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARUCO_MESSAGE_MARKER_H
